import express from "express";
import mongoose from "mongoose";

const router = express.Router();

// –ú–æ–¥–µ–ª—å –≤–æ–ø—Ä–æ—Å–∞
const questionSchema = new mongoose.Schema({
  category: String,
  text: String,
  answers: [String],
  correctIndex: Number,
  difficulty: String, // –Ω–∞–ø—Ä–∏–º–µ—Ä: "easy", "medium", "hard"
});

const Question = mongoose.model("Question", questionSchema);

// –ú–æ–¥–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const resultSchema = new mongoose.Schema({
  telegramId: String,
  score: Number,
  createdAt: { type: Date, default: Date.now },
});

const Result = mongoose.model("Result", resultSchema);

// üìå GET /api/game/questions ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
router.get("/questions", async (req, res) => {
  try {
    const questions = await Question.aggregate([{ $sample: { size: 10 } }]);
    res.json(questions);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå POST /api/game/result ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—á–∫–∏
router.post("/result", async (req, res) => {
  const { telegramId, score } = req.body;

  if (!telegramId || score === undefined) {
    return res.status(400).json({ error: "–ù—É–∂–µ–Ω telegramId –∏ score" });
  }

  try {
    const result = new Result({ telegramId, score });
    await result.save();
    res.json({ success: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

export default router;
